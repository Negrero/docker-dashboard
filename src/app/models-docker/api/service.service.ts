/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {   \"message\": \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned. If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release. Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine. The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons. # Authentication Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure: ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required. If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials: ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.40
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ErrorResponse } from '../model/errorResponse';
import { Service } from '../model/service';
import { ServiceCreateResponse } from '../model/serviceCreateResponse';
import { ServiceUpdateResponse } from '../model/serviceUpdateResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ServiceService {

    protected basePath = 'http://localhost/v1.40';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a service
     * 
     * @param body 
     * @param xRegistryAuth A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceCreate(body: any, xRegistryAuth?: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceCreateResponse>;
    public serviceCreate(body: any, xRegistryAuth?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCreateResponse>>;
    public serviceCreate(body: any, xRegistryAuth?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCreateResponse>>;
    public serviceCreate(body: any, xRegistryAuth?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling serviceCreate.');
        }


        let headers = this.defaultHeaders;
        if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
            headers = headers.set('X-Registry-Auth', String(xRegistryAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceCreateResponse>(`${this.basePath}/services/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a service
     * 
     * @param id ID or name of service.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public serviceDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public serviceDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public serviceDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/services/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Inspect a service
     * 
     * @param id ID or name of service.
     * @param insertDefaults Fill empty fields with default values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceInspect(id: string, insertDefaults?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Service>;
    public serviceInspect(id: string, insertDefaults?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Service>>;
    public serviceInspect(id: string, insertDefaults?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Service>>;
    public serviceInspect(id: string, insertDefaults?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceInspect.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (insertDefaults !== undefined && insertDefaults !== null) {
            queryParameters = queryParameters.set('insertDefaults', <any>insertDefaults);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Service>(`${this.basePath}/services/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List services
     * 
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list. Available filters: - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceList(filters?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Service>>;
    public serviceList(filters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Service>>>;
    public serviceList(filters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Service>>>;
    public serviceList(filters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filters !== undefined && filters !== null) {
            queryParameters = queryParameters.set('filters', <any>filters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Array<Service>>(`${this.basePath}/services`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get service logs
     * Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a service. See also [&#x60;/containers/{id}/logs&#x60;](#operation/ContainerLogs). **Note**: This endpoint works only for services with the &#x60;local&#x60;, &#x60;json-file&#x60; or &#x60;journald&#x60; logging drivers. 
     * @param id ID or name of the service
     * @param details Show service context and extra details provided to logs.
     * @param follow Keep connection after returning logs.
     * @param stdout Return logs from &#x60;stdout&#x60;
     * @param stderr Return logs from &#x60;stderr&#x60;
     * @param since Only return logs since this time, as a UNIX timestamp
     * @param timestamps Add timestamps to every log line
     * @param tail Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceLogs.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (details !== undefined && details !== null) {
            queryParameters = queryParameters.set('details', <any>details);
        }
        if (follow !== undefined && follow !== null) {
            queryParameters = queryParameters.set('follow', <any>follow);
        }
        if (stdout !== undefined && stdout !== null) {
            queryParameters = queryParameters.set('stdout', <any>stdout);
        }
        if (stderr !== undefined && stderr !== null) {
            queryParameters = queryParameters.set('stderr', <any>stderr);
        }
        if (since !== undefined && since !== null) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (timestamps !== undefined && timestamps !== null) {
            queryParameters = queryParameters.set('timestamps', <any>timestamps);
        }
        if (tail !== undefined && tail !== null) {
            queryParameters = queryParameters.set('tail', <any>tail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<string>(`${this.basePath}/services/${encodeURIComponent(String(id))}/logs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a service
     * 
     * @param id ID or name of service.
     * @param body 
     * @param version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60;
     * @param registryAuthFrom If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are &#x60;spec&#x60; and &#x60;previous-spec&#x60;.
     * @param rollback Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case.
     * @param xRegistryAuth A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serviceUpdate(id: string, body: any, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceUpdateResponse>;
    public serviceUpdate(id: string, body: any, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceUpdateResponse>>;
    public serviceUpdate(id: string, body: any, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceUpdateResponse>>;
    public serviceUpdate(id: string, body: any, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling serviceUpdate.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling serviceUpdate.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling serviceUpdate.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (registryAuthFrom !== undefined && registryAuthFrom !== null) {
            queryParameters = queryParameters.set('registryAuthFrom', <any>registryAuthFrom);
        }
        if (rollback !== undefined && rollback !== null) {
            queryParameters = queryParameters.set('rollback', <any>rollback);
        }

        let headers = this.defaultHeaders;
        if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
            headers = headers.set('X-Registry-Auth', String(xRegistryAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceUpdateResponse>(`${this.basePath}/services/${encodeURIComponent(String(id))}/update`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
