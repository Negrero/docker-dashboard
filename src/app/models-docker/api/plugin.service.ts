/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {   \"message\": \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned. If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release. Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine. The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons. # Authentication Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure: ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required. If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials: ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.40
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Body } from '../model/body';
import { ErrorResponse } from '../model/errorResponse';
import { Plugin } from '../model/plugin';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PluginService {

    protected basePath = 'http://localhost/v1.40';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get plugin privileges
     * 
     * @param remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPluginPrivileges(remote: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getPluginPrivileges(remote: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getPluginPrivileges(remote: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getPluginPrivileges(remote: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling getPluginPrivileges.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (remote !== undefined && remote !== null) {
            queryParameters = queryParameters.set('remote', <any>remote);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/plugins/privileges`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param tarContext Path to tar containing plugin rootfs and manifest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginCreate(name: string, tarContext?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginCreate(name: string, tarContext?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginCreate(name: string, tarContext?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginCreate(name: string, tarContext?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginCreate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-tar'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/plugins/create`,
            tarContext,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param force Disable the plugin before removing. This may result in issues if the plugin is in use by a container.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginDelete(name: string, force?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Plugin>;
    public pluginDelete(name: string, force?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Plugin>>;
    public pluginDelete(name: string, force?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Plugin>>;
    public pluginDelete(name: string, force?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginDelete.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (force !== undefined && force !== null) {
            queryParameters = queryParameters.set('force', <any>force);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.delete<Plugin>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginDisable(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginDisable(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginDisable(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginDisable(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginDisable.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/disable`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enable a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param timeout Set the HTTP client timeout (in seconds)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginEnable(name: string, timeout?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginEnable(name: string, timeout?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginEnable(name: string, timeout?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginEnable(name: string, timeout?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginEnable.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (timeout !== undefined && timeout !== null) {
            queryParameters = queryParameters.set('timeout', <any>timeout);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/enable`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Inspect a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginInspect(name: string, observe?: 'body', reportProgress?: boolean): Observable<Plugin>;
    public pluginInspect(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Plugin>>;
    public pluginInspect(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Plugin>>;
    public pluginInspect(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginInspect.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Plugin>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List plugins
     * Returns information about installed plugins.
     * @param filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list. Available filters: - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginList(filters?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Plugin>>;
    public pluginList(filters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Plugin>>>;
    public pluginList(filters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Plugin>>>;
    public pluginList(filters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filters !== undefined && filters !== null) {
            queryParameters = queryParameters.set('filters', <any>filters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Array<Plugin>>(`${this.basePath}/plugins`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Install a plugin
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [&#x60;POST /plugins/{name}/enable&#x60; endpoint](#operation/PostPluginsEnable). 
     * @param remote Remote reference for plugin to install. The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param name Local name for the pulled plugin. The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param xRegistryAuth A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginPull(remote: string, name?: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginPull(remote: string, name?: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginPull(remote: string, name?: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginPull(remote: string, name?: string, xRegistryAuth?: string, body?: Array<Body>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling pluginPull.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (remote !== undefined && remote !== null) {
            queryParameters = queryParameters.set('remote', <any>remote);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;
        if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
            headers = headers.set('X-Registry-Auth', String(xRegistryAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/plugins/pull`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Push a plugin
     * Push a plugin to the registry. 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginPush(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginPush(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginPush(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginPush(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginPush.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/push`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Configure a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginSet(name: string, body?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginSet(name: string, body?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginSet(name: string, body?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginSet(name: string, body?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginSet.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/set`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upgrade a plugin
     * 
     * @param name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.
     * @param remote Remote reference to upgrade to. The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param xRegistryAuth A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pluginUpgrade(name: string, remote: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pluginUpgrade(name: string, remote: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pluginUpgrade(name: string, remote: string, xRegistryAuth?: string, body?: Array<Body>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pluginUpgrade(name: string, remote: string, xRegistryAuth?: string, body?: Array<Body>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling pluginUpgrade.');
        }

        if (remote === null || remote === undefined) {
            throw new Error('Required parameter remote was null or undefined when calling pluginUpgrade.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (remote !== undefined && remote !== null) {
            queryParameters = queryParameters.set('remote', <any>remote);
        }

        let headers = this.defaultHeaders;
        if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
            headers = headers.set('X-Registry-Auth', String(xRegistryAuth));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/plugins/${encodeURIComponent(String(name))}/upgrade`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
