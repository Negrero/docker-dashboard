/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API. Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls. # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {   \"message\": \"page not found\" } ``` # Versioning The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned. If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release. Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine. The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons. # Authentication Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure: ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ``` The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required. If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials: ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.40
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ContainerCreateResponse } from '../model/containerCreateResponse';
import { ContainerInspectResponse } from '../model/containerInspectResponse';
import { ContainerPruneResponse } from '../model/containerPruneResponse';
import { ContainerSummary } from '../model/containerSummary';
import { ContainerTopResponse } from '../model/containerTopResponse';
import { ContainerUpdateResponse } from '../model/containerUpdateResponse';
import { ContainerWaitResponse } from '../model/containerWaitResponse';
import { ErrorResponse } from '../model/errorResponse';
import { InlineResponse400 } from '../model/inlineResponse400';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ContainerService {

    protected basePath = 'http://localhost/v1.40';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get an archive of a filesystem resource in a container
     * Get a tar archive of a resource in the filesystem of container id.
     * @param id ID or name of the container
     * @param path Resource in the container’s filesystem to archive.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerArchive(id: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerArchive(id: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerArchive(id: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerArchive(id: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerArchive.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling containerArchive.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/x-tar'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/archive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get information about files in a container
     * A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.
     * @param id ID or name of the container
     * @param path Resource in the container’s filesystem to archive.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerArchiveInfo(id: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerArchiveInfo(id: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerArchiveInfo(id: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerArchiveInfo(id: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerArchiveInfo.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling containerArchiveInfo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.head<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/archive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Attach to a container
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached. Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything. See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details. ### Hijacking This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket. This is the response from the daemon for an attach request: &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream [STREAM] &#x60;&#x60;&#x60; After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server. To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers. For example, the client sends this request to upgrade the connection: &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60; The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream: &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp [STREAM] &#x60;&#x60;&#x60; ### Stream format When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload. The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;). It is encoded on the first eight bytes like this: &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60; &#x60;STREAM_TYPE&#x60; can be: - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60; &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian. Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;. The simplest way to implement this protocol is the following: 1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1. ### Stream format when using a TTY When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;.
     * @param logs Replay previous logs from the container. This is useful for attaching to a container that has started and you want to output everything since the container started. If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @param stream Stream attached streams from the time the request was made onwards
     * @param stdin Attach to &#x60;stdin&#x60;
     * @param stdout Attach to &#x60;stdout&#x60;
     * @param stderr Attach to &#x60;stderr&#x60;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerAttach.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (detachKeys !== undefined && detachKeys !== null) {
            queryParameters = queryParameters.set('detachKeys', <any>detachKeys);
        }
        if (logs !== undefined && logs !== null) {
            queryParameters = queryParameters.set('logs', <any>logs);
        }
        if (stream !== undefined && stream !== null) {
            queryParameters = queryParameters.set('stream', <any>stream);
        }
        if (stdin !== undefined && stdin !== null) {
            queryParameters = queryParameters.set('stdin', <any>stdin);
        }
        if (stdout !== undefined && stdout !== null) {
            queryParameters = queryParameters.set('stdout', <any>stdout);
        }
        if (stderr !== undefined && stderr !== null) {
            queryParameters = queryParameters.set('stderr', <any>stderr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.docker.raw-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/attach`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Attach to a container via a websocket
     * 
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;.
     * @param logs Return logs
     * @param stream Return stream
     * @param stdin Attach to &#x60;stdin&#x60;
     * @param stdout Attach to &#x60;stdout&#x60;
     * @param stderr Attach to &#x60;stderr&#x60;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerAttachWebsocket.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (detachKeys !== undefined && detachKeys !== null) {
            queryParameters = queryParameters.set('detachKeys', <any>detachKeys);
        }
        if (logs !== undefined && logs !== null) {
            queryParameters = queryParameters.set('logs', <any>logs);
        }
        if (stream !== undefined && stream !== null) {
            queryParameters = queryParameters.set('stream', <any>stream);
        }
        if (stdin !== undefined && stdin !== null) {
            queryParameters = queryParameters.set('stdin', <any>stdin);
        }
        if (stdout !== undefined && stdout !== null) {
            queryParameters = queryParameters.set('stdout', <any>stdout);
        }
        if (stderr !== undefined && stderr !== null) {
            queryParameters = queryParameters.set('stderr', <any>stderr);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/attach/ws`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get changes on a container’s filesystem
     * Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of: - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
     * @param id ID or name of the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerChanges(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public containerChanges(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public containerChanges(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public containerChanges(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerChanges.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/changes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a container
     * 
     * @param body Container to create
     * @param name Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerCreate(body: any, name?: string, observe?: 'body', reportProgress?: boolean): Observable<ContainerCreateResponse>;
    public containerCreate(body: any, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerCreateResponse>>;
    public containerCreate(body: any, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerCreateResponse>>;
    public containerCreate(body: any, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling containerCreate.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/octet-stream'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ContainerCreateResponse>(`${this.basePath}/containers/create`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove a container
     * 
     * @param id ID or name of the container
     * @param v Remove the volumes associated with the container.
     * @param force If the container is running, kill it before removing it.
     * @param link Remove the specified link associated with the container.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerDelete.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (v !== undefined && v !== null) {
            queryParameters = queryParameters.set('v', <any>v);
        }
        if (force !== undefined && force !== null) {
            queryParameters = queryParameters.set('force', <any>force);
        }
        if (link !== undefined && link !== null) {
            queryParameters = queryParameters.set('link', <any>link);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export a container
     * Export the contents of a container as a tarball.
     * @param id ID or name of the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerExport(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerExport(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerExport(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerExport(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerExport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/export`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Inspect a container
     * Return low-level information about a container.
     * @param id ID or name of the container
     * @param size Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerInspect(id: string, size?: boolean, observe?: 'body', reportProgress?: boolean): Observable<ContainerInspectResponse>;
    public containerInspect(id: string, size?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerInspectResponse>>;
    public containerInspect(id: string, size?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerInspectResponse>>;
    public containerInspect(id: string, size?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerInspect.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<ContainerInspectResponse>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/json`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Kill a container
     * Send a POSIX signal to a container, defaulting to killing to the container.
     * @param id ID or name of the container
     * @param signal Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerKill(id: string, signal?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerKill(id: string, signal?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerKill(id: string, signal?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerKill(id: string, signal?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerKill.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (signal !== undefined && signal !== null) {
            queryParameters = queryParameters.set('signal', <any>signal);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/kill`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List containers
     * Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect). Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @param all Return all containers. By default, only running containers are shown
     * @param limit Return this number of most recently created containers, including non-running ones.
     * @param size Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;.
     * @param filters Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters: - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, observe?: 'body', reportProgress?: boolean): Observable<ContainerSummary>;
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerSummary>>;
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerSummary>>;
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (all !== undefined && all !== null) {
            queryParameters = queryParameters.set('all', <any>all);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (filters !== undefined && filters !== null) {
            queryParameters = queryParameters.set('filters', <any>filters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<ContainerSummary>(`${this.basePath}/containers/json`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get container logs
     * Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container. Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
     * @param id ID or name of the container
     * @param follow Keep connection after returning logs.
     * @param stdout Return logs from &#x60;stdout&#x60;
     * @param stderr Return logs from &#x60;stderr&#x60;
     * @param since Only return logs since this time, as a UNIX timestamp
     * @param until Only return logs before this time, as a UNIX timestamp
     * @param timestamps Add timestamps to every log line
     * @param tail Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerLogs.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (follow !== undefined && follow !== null) {
            queryParameters = queryParameters.set('follow', <any>follow);
        }
        if (stdout !== undefined && stdout !== null) {
            queryParameters = queryParameters.set('stdout', <any>stdout);
        }
        if (stderr !== undefined && stderr !== null) {
            queryParameters = queryParameters.set('stderr', <any>stderr);
        }
        if (since !== undefined && since !== null) {
            queryParameters = queryParameters.set('since', <any>since);
        }
        if (until !== undefined && until !== null) {
            queryParameters = queryParameters.set('until', <any>until);
        }
        if (timestamps !== undefined && timestamps !== null) {
            queryParameters = queryParameters.set('timestamps', <any>timestamps);
        }
        if (tail !== undefined && tail !== null) {
            queryParameters = queryParameters.set('tail', <any>tail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<string>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/logs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Pause a container
     * Use the cgroups freezer to suspend all processes in a container. Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @param id ID or name of the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerPause(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerPause(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerPause(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerPause(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerPause.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/pause`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete stopped containers
     * 
     * @param filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerPrune(filters?: string, observe?: 'body', reportProgress?: boolean): Observable<ContainerPruneResponse>;
    public containerPrune(filters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerPruneResponse>>;
    public containerPrune(filters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerPruneResponse>>;
    public containerPrune(filters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filters !== undefined && filters !== null) {
            queryParameters = queryParameters.set('filters', <any>filters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<ContainerPruneResponse>(`${this.basePath}/containers/prune`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Rename a container
     * 
     * @param id ID or name of the container
     * @param name New name for the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerRename(id: string, name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerRename(id: string, name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerRename(id: string, name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerRename(id: string, name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerRename.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling containerRename.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/rename`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resize a container TTY
     * Resize the TTY for a container. You must restart the container for the resize to take effect.
     * @param id ID or name of the container
     * @param h Height of the tty session in characters
     * @param w Width of the tty session in characters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerResize(id: string, h?: number, w?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerResize(id: string, h?: number, w?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerResize(id: string, h?: number, w?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerResize(id: string, h?: number, w?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerResize.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (h !== undefined && h !== null) {
            queryParameters = queryParameters.set('h', <any>h);
        }
        if (w !== undefined && w !== null) {
            queryParameters = queryParameters.set('w', <any>w);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/octet-stream'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/resize`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Restart a container
     * 
     * @param id ID or name of the container
     * @param t Number of seconds to wait before killing the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerRestart(id: string, t?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerRestart(id: string, t?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerRestart(id: string, t?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerRestart(id: string, t?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerRestart.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (t !== undefined && t !== null) {
            queryParameters = queryParameters.set('t', <any>t);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/restart`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start a container
     * 
     * @param id ID or name of the container
     * @param detachKeys Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerStart(id: string, detachKeys?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerStart(id: string, detachKeys?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerStart(id: string, detachKeys?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerStart(id: string, detachKeys?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStart.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (detachKeys !== undefined && detachKeys !== null) {
            queryParameters = queryParameters.set('detachKeys', <any>detachKeys);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/start`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get container stats based on resource usage
     * This endpoint returns a live stream of a container’s resource usage statistics. The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field. If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. 
     * @param id ID or name of the container
     * @param stream Stream the output. If false, the stats will be output once and then it will disconnect.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerStats(id: string, stream?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerStats(id: string, stream?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerStats(id: string, stream?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerStats(id: string, stream?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStats.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (stream !== undefined && stream !== null) {
            queryParameters = queryParameters.set('stream', <any>stream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/stats`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop a container
     * 
     * @param id ID or name of the container
     * @param t Number of seconds to wait before killing the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerStop(id: string, t?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerStop(id: string, t?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerStop(id: string, t?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerStop(id: string, t?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerStop.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (t !== undefined && t !== null) {
            queryParameters = queryParameters.set('t', <any>t);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/stop`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List processes running inside a container
     * On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.
     * @param id ID or name of the container
     * @param psArgs The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerTop(id: string, psArgs?: string, observe?: 'body', reportProgress?: boolean): Observable<ContainerTopResponse>;
    public containerTop(id: string, psArgs?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerTopResponse>>;
    public containerTop(id: string, psArgs?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerTopResponse>>;
    public containerTop(id: string, psArgs?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerTop.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (psArgs !== undefined && psArgs !== null) {
            queryParameters = queryParameters.set('ps_args', <any>psArgs);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.get<ContainerTopResponse>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/top`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unpause a container
     * Resume a container which has been paused.
     * @param id ID or name of the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerUnpause(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public containerUnpause(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public containerUnpause(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public containerUnpause(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerUnpause.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/unpause`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a container
     * Change various configuration options of a container without having to recreate it.
     * @param id ID or name of the container
     * @param update 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerUpdate(id: string, update: any, observe?: 'body', reportProgress?: boolean): Observable<ContainerUpdateResponse>;
    public containerUpdate(id: string, update: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerUpdateResponse>>;
    public containerUpdate(id: string, update: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerUpdateResponse>>;
    public containerUpdate(id: string, update: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerUpdate.');
        }

        if (update === null || update === undefined) {
            throw new Error('Required parameter update was null or undefined when calling containerUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ContainerUpdateResponse>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/update`,
            update,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Wait for a container
     * Block until a container stops, then returns the exit code.
     * @param id ID or name of the container
     * @param condition Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public containerWait(id: string, condition?: string, observe?: 'body', reportProgress?: boolean): Observable<ContainerWaitResponse>;
    public containerWait(id: string, condition?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContainerWaitResponse>>;
    public containerWait(id: string, condition?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContainerWaitResponse>>;
    public containerWait(id: string, condition?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling containerWait.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (condition !== undefined && condition !== null) {
            queryParameters = queryParameters.set('condition', <any>condition);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/plain'
        ];

        return this.httpClient.post<ContainerWaitResponse>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/wait`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Extract an archive of files or folders to a directory in a container
     * Upload a tar archive to be extracted to a path in the filesystem of container id.
     * @param id ID or name of the container
     * @param path Path to a directory in the container to extract the archive’s contents into. 
     * @param inputStream The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @param noOverwriteDirNonDir If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putContainerArchive(id: string, path: string, inputStream: string, noOverwriteDirNonDir?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putContainerArchive(id: string, path: string, inputStream: string, noOverwriteDirNonDir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putContainerArchive(id: string, path: string, inputStream: string, noOverwriteDirNonDir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putContainerArchive(id: string, path: string, inputStream: string, noOverwriteDirNonDir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putContainerArchive.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling putContainerArchive.');
        }

        if (inputStream === null || inputStream === undefined) {
            throw new Error('Required parameter inputStream was null or undefined when calling putContainerArchive.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }
        if (noOverwriteDirNonDir !== undefined && noOverwriteDirNonDir !== null) {
            queryParameters = queryParameters.set('noOverwriteDirNonDir', <any>noOverwriteDirNonDir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-tar',
            'application/octet-stream'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/containers/${encodeURIComponent(String(id))}/archive`,
            inputStream,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
